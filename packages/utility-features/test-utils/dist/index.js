(()=>{"use strict";var e={n:r=>{var t=r&&r.__esModule?()=>r.default:()=>r;return e.d(t,{a:t}),t},d:(r,t)=>{for(var o in t)e.o(t,o)&&!e.o(r,o)&&Object.defineProperty(r,o,{enumerable:!0,get:t[o]})},o:(e,r)=>Object.prototype.hasOwnProperty.call(e,r),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{flushPromises:()=>o,getGlobalOverride:()=>i,getGlobalOverrideForFunction:()=>a,getPromiseStatus:()=>l,renderFor:()=>b,runWithThrownMobxReactions:()=>f});const t=require("timers/promises"),o=async()=>{await(0,t.setImmediate)(),await(0,t.setTimeout)(5)},i=(e,r)=>({injectable:e,overridingInstantiate:r}),n=require("lodash/fp"),a=e=>i(e,(()=>(...r)=>{throw console.warn(`Tried to invoke a function "${e.id}" without override. The args were:`,r),new Error(`Tried to invoke a function "${e.id}" without override. Add eg. "di.override(${(0,n.camelCase)(e.id)}Mock)" to the unit test interested in this.`)})),l=async e=>{const r={fulfilled:!1};return e.finally((()=>{r.fulfilled=!0})),await o(),r},d=require("react");var s=e.n(d);const u=require("@testing-library/react"),c=require("@ogre-tools/injectable-react"),b=e=>r=>{const t=(0,u.render)(s().createElement(c.DiContextProvider,{value:{di:e}},r));return{...t,rerender:r=>t.rerender(s().createElement(c.DiContextProvider,{value:{di:e}},r))}},w=require("mobx"),f=e=>{const r=console.warn;let t;console.warn=n.noop,(0,w.configure)({disableErrorBoundaries:!0}),console.warn=r;try{e()}catch(e){t=e}finally{throw(0,w.configure)({disableErrorBoundaries:!1}),(0,w._resetGlobalState)(),t||new Error("Tried to run with thrown MobX reactions but nothing was thrown")}};module.exports=r})();